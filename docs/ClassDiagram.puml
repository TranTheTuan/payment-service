@startuml
namespace domain {
    interface AccountInformationService  {
        + IsAccountExists(accountNumber string) bool
        + GetTransactionPrivileges(accountNumber string) (TransactionPrivileges, error)

    }
    class AuthenticationResult << (S,Aquamarine) >> {
        + AccessToken string

    }
    interface AuthenticationService  {
        + Authenticate(username string, password string) (AuthenticationResult, error)

    }
    class ConfiguredCredential << (S,Aquamarine) >> {
        + Pin *PinCredential
        + Otp *OtpCredential

        + IsPinConfigured() bool
        + IsOtpConfigured() bool

    }
    class FindUserResult << (S,Aquamarine) >> {
        + ID string
        + Name string
        + AccountReference string
        + JoinAt time.Time

    }
    class OtpCredential << (S,Aquamarine) >> {
        + PhoneNumber string

    }
    interface OtpCredentialManager  {
        + RequestNewOtp(userId string) error

    }
    class PinCredential << (S,Aquamarine) >> {
        + Pin string

    }
    interface PinCredentialManager  {
    }
    class Transaction << (S,Aquamarine) >> {
        + ID string
        + UserID string
        + State TransactionState
        + AuthorizationMethod AuthorizationMethod
        + TransactionCode string
        + Amount *big.Float
        + SourceAccount string
        + DestinationAccount string
        + CreatedAt time.Time

    }
    class TransactionCreation << (S,Aquamarine) >> {
        + SourceAccount string
        + DestinationAccount string
        + TransactionCode string
        + Amount *big.Float
        + Currency string
        + TransactionDate *time.Time

    }
    class TransactionDetail << (S,Aquamarine) >> {
        + Code string
        + MinimumAmount *big.Float

    }
    interface TransactionInformationService  {
        + FindTransactionDetailByCode(code string) (TransactionDetail, error)

    }
    class TransactionPrivileges << (S,Aquamarine) >> {
        + Codes []string

    }
    interface TransactionService  {
        + CreateTransaction(transactionCreation TransactionCreation) error

    }
    class User << (S,Aquamarine) >> {
        + ID string
        + Name string
        + AccountReference string
        + JoinDate time.Time
        + Username string
        + Password string
        + ConfiguredTransactionCredential *ConfiguredCredential

    }
    interface UserCredentialValidator  {
        + Validate(userId string, credential string) error

    }
    interface UserRepository  {
        + LoadUser(id string) (*User, error)
        + LoadByUsername(username string) (*User, error)

    }
    interface UserService  {
        + FindUser(userId string) (FindUserResult, error)

    }
    class UserSession << (S,Aquamarine) >> {
    }
    interface UserSessionHelper  {
        + GetFromContext(ctx context.Context) (UserSession, error)

    }
    class domain.AuthorizationMethod << (T, #FF7700) >>  {
    }
    class domain.TransactionState << (T, #FF7700) >>  {
    }
}
"domain.UserCredentialValidator" *-- "domain.OtpCredentialManager"
"domain.UserCredentialValidator" *-- "domain.PinCredentialManager"
"domain.User" *-- "domain.UserSession"


namespace fake {
    class FakeAccountInformationService << (S,Aquamarine) >> {
        + IsAccountExists(accountNumber string) bool
        + GetTransactionPrivileges(accountNumber string) (domain.TransactionPrivileges, error)

    }
    class FakeAccountTransactionService << (S,Aquamarine) >> {
        + CreateTransaction(transactionCreation domain.TransactionCreation) error

    }
    class FakeOtpCredentialManager << (S,Aquamarine) >> {
        - repository domain.UserRepository

        + Validate(userId string, credential string) error
        + RequestNewOtp(userId string) error

    }
    class FakePinCredentialManager << (S,Aquamarine) >> {
        - repository domain.UserRepository

        + Validate(userId string, credential string) error

    }
    class FakeTransactionInformationService << (S,Aquamarine) >> {
        + FindTransactionDetailByCode(code string) (domain.TransactionDetail, error)

    }
    class FakeUserService << (S,Aquamarine) >> {
        - repository domain.UserRepository

        + FindUser(userId string) (domain.FindUserResult, error)

    }
}

"domain.AccountInformationService" <|-- "fake.FakeAccountInformationService"
"domain.TransactionService" <|-- "fake.FakeAccountTransactionService"
"domain.OtpCredentialManager" <|-- "fake.FakeOtpCredentialManager"
"domain.UserCredentialValidator" <|-- "fake.FakeOtpCredentialManager"
"domain.UserCredentialValidator" <|-- "fake.FakePinCredentialManager"
"domain.TransactionInformationService" <|-- "fake.FakeTransactionInformationService"
"domain.UserService" <|-- "fake.FakeUserService"

namespace handler {
    class AuthenticationEndpoint << (S,Aquamarine) >> {
        - authenticationService domain.AuthenticationService

        + BindRoutes(r chi.Router) 
        + HandleAuthenticationFlow(w http.ResponseWriter, r *http.Request) 

    }
    class AuthenticationFailedResponse << (S,Aquamarine) >> {
        + Message string
        + HTTPStatus int

        + Render(w http.ResponseWriter, r *http.Request) error

    }
    class AuthenticationRequest << (S,Aquamarine) >> {
        + Username string
        + Password string

        + Bind(req *http.Request) error

    }
    class AuthenticationResponse << (S,Aquamarine) >> {
        + AccessToken string

        + Render(w http.ResponseWriter, r *http.Request) error

    }
    class CreateTransactionRequest << (S,Aquamarine) >> {
        + TransactionCode string
        + Amount *big.Float
        + DestinationAccount string
        + AuthorizationMethod string

        + Bind(req *http.Request) error

    }
    class CreateTransactionSuccess << (S,Aquamarine) >> {
        + TransactionID string

        + Render(w http.ResponseWriter, r *http.Request) error

    }
    class GetTransactionSuccess << (S,Aquamarine) >> {
        + ID string
        + Amount *big.Float
        + DestinationAccount string
        + State string

        + Render(w http.ResponseWriter, r *http.Request) error

    }
    class TransactionEndpoint << (S,Aquamarine) >> {
        - userSessionHelper domain.UserSessionHelper

        + BindRoutes(r chi.Router) 
        + HandleCreateTransaction(w http.ResponseWriter, r *http.Request) 
        + HandleVerifyTransaction(w http.ResponseWriter, r *http.Request) 
        + HandleGetTransaction(w http.ResponseWriter, r *http.Request) 

    }
    class TransactionHandlerFailed << (S,Aquamarine) >> {
        + HttpCode int
        + Message string

        + Render(w http.ResponseWriter, r *http.Request) error

    }
    class VerifyTransactionRequest << (S,Aquamarine) >> {
        + Credential string

        + Bind(req *http.Request) error

    }
    class VerifyTransactionSuccess << (S,Aquamarine) >> {
        + TransactionID string

        + Render(w http.ResponseWriter, r *http.Request) error

    }
}


namespace inmemory {
    class InMemoryUserRepository << (S,Aquamarine) >> {
        - datastore <font color=blue>map</font>[string]*domain.User

        - init() 

        + LoadUser(id string) (*domain.User, error)
        + LoadByUsername(username string) (*domain.User, error)

    }
}

"domain.UserRepository" <|-- "inmemory.InMemoryUserRepository"

namespace jwt {
    class jwt.ClaimsMapper << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>() jwt-go.Claims" as fontcolorbluefuncfontjwtgoClaims {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace pg {
    class CrudRepositoryWrapper << (S,Aquamarine) >> {
        - db *pg.DB

        + Save(model <font color=blue>interface</font>{}) error
        + Load(model <font color=blue>interface</font>{}) error
        + Remove(model <font color=blue>interface</font>{}) error

    }
}


namespace service {
    class AuthenticationServiceImpl << (S,Aquamarine) >> {
        - repository domain.UserRepository

        + Authenticate(username string, password string) (domain.AuthenticationResult, error)

    }
    class UserSessionHelperImpl << (S,Aquamarine) >> {
        - userRepository domain.UserRepository

        + GetFromContext(ctx context.Context) (domain.UserSession, error)

    }
}

"domain.AuthenticationService" <|-- "service.AuthenticationServiceImpl"
"domain.UserSessionHelper" <|-- "service.UserSessionHelperImpl"

"__builtin__.int" #.. "domain.AuthorizationMethod"
"__builtin__.int" #.. "domain.TransactionState"
"jwt.fontcolorbluefuncfontjwtgoClaims" #.. "jwt.ClaimsMapper"
@enduml
